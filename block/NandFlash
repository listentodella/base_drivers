Nand Flash是一个存储芯片
那么这样的操作很合理：“读地址A的数据， 把数据B写到地址A”

Q1：原理图上NAND Flash 和 S3C2440之间只有数据线DATA0~7，怎么传输地址？
A1：在DATA0~7上既传输数据，又传输地址
    当ALE为高电平时传输的是地址
//    当ALE为低电平时传输的是数据

Q2：从NAND Flash芯片手册可知，要操作NAND Flash需要先发出命令，怎么通过这7根线传输命令？
A2：在DATA0~7上既传输数据，又传输地址，也传输命令
    当ALE为高电平时传输的是地址
    当CLE为高电平时传输的是命令
    当CLE和ALE都为低电平时传输的是数据

Q3：数据线既接到NAND Flash，也接到NOR Flash，还有SDRAM DM9000等等，怎么避免干扰？
A3：这些设备在访问之前，必须选中，没有选中的芯片不会工作，相对于没接一样——————片选

Q4：假设烧写NAND Flash，把命令、地址、数据发送给它之后，NAND肯定不可能瞬间完成烧写，如何判断烧写完成？
A4：通过状态引脚RnB来判断，高电平表示就绪，低电平表示正忙

Q5：怎么操作NAND Flash？
A5：根据spec，一般的过程是：
    发出命令
    发出地址
    发出数据/读数据

          NAND FLASH                    S3C2440
发命令：      选中芯片
          CLE设为高电平              NFCMD = 命令值
          在D0~D7输出命令值
          发出一个写脉冲

发地址：      选中芯片                NFADDR = 地址值
          ALE设为高电平
          在D0~D7输出地址值
          发出一个写脉冲

发数据：      选中芯片                NFDATA = 数据值
          ALE CLE设为低电平
          在D0~D7输出数据值
          发出一个写脉冲

读数据：      选中芯片                val = NFDATA
          发出一个读脉冲
            读D0~D7数据




用UBOOT来体验NAND FLASH的操作：
uboot:md(memory display) mw(memory write)




1.读ID
                                                         寄存器地址      uboot
  选中                                            NFCONT的bit1设为0  0x4E00 0004    md.l 0x4E00 0004, 1;  mw.l 0x4E00 0004, 1
  发出命令0x90                                    NFCMMD = 0x90      0x4E00 0008    mw.b 0x4E00 0008, 0x90
  发出地址0x00                                    NFADDR = 0x00      0x4E00 000C    mw.b 0x4E00 000C, 0x00
  读数据得到0xEC                                  val = NFDATA       0x4E00 0010    md.b 0x4E00 00010 1
  读数据得到device code                            val = NFDATA       0x4E00 0010   md.b 0x4E00 00010 1
  退出读ID的状态                                    NFCMMD = 0xFF     0x4E00 0008   mw.b 0x4E00 0008, 0xFF


2.读内容：读0地址里的数据
  使用uboot命令 nand dump 0
  可以认为uboot命令就是上面命令的组合


Nand驱动框架
APP:open read write
--------------------------------
      sys_open sys_read sys_wi
VFS---------------------------
                              FS:vfat yaffs2 jffs2
--------------------------------
drivers/mtd/mtdchar.c   字符设备     | 块设备       知道怎么优化>>>>drivers/mtd/mtd_blkdev.c
                                    |         ---------------
                                    |  nand_scan结构体      Nand Flash协议  知道发什么来读写扇区、擦除扇区、识别扇区 实现其成员
                                    |         ---------------
                                    |  nand_chip结构体         硬件相关      知道怎样发命令/地址、读写数据
--------------------------------
硬件


硬件相关：参考/drivers/mtd/nand/at91_nand.c
1.分配 nand_chip
2.设置 nand_chip
3.硬件相关设置
4.使用结构体 nand_scan/add_mtd_partition



Nand 驱动程序
参考/drivers/mtd/nand/s3c2410.c
s3c2410_nand_inithw
s3c2410_nand_init_chip
nand_scan                 //drivers/mtd/nand/nand_base.c
  nand_scan_ident
    nand_get_defaults
    nand_get_flash_type
      chip->select_chip(mtd, 0);
      chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
      *maf_id = chip->read_byte(mtd);//厂家id
      dev_id = chip->read_byte(mtd);//设备id
  nand_scan_tail
s3c2410_nand_add_partition
  add_mtd_partitions
    add_mtd_device
      list_for_each(this, &mtd_notifiers) {//Q:mtd_notifiers在哪里设置？
                                            //A:drivers/mtd/mtdchar.c, mtd_blkdev.c 调用 register_mtd_user
    			struct mtd_notifier *not = list_entry(this, struct mtd_notifier, list);
    			not->add(mtd);
          //mtd_notify_add 和 blktrans_notify_add
          先看字符设备的 mtd_notify_add
            class_device_create
            class_device_create
          再看块设备的  blktrans_notify_add
          list_for_each(this, &blktrans_majors) {//Q:blktrans_majors在哪里注册？
                                                //A:drivers/mtd/mdblock.c 或 mtdblock_ro.c  register_mtd_user
            struct mtd_blktrans_ops *tr = list_entry(this, struct mtd_blktrans_ops, list);
            tr->add_mtd(tr, mtd);
                mtdblock_add_mtd (drivers/mtd/mdblock.c)
                  add_mtd_blktrans_dev
                  alloc_disk、queue、add_disk....
